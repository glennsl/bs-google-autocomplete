// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Googleplaces$Googleplacesautocomplete = require("./Googleplaces.bs.js");

function componentForm() {
  return {
          street_number: "short_name",
          route: "long_name",
          locality: "long_name",
          administrative_area_level_1: "short_name",
          country: "long_name",
          postal_code: "short_name"
        };
}

var component_array = /* array */[
  "street_number",
  "route",
  "locality",
  "administrative_area_level_1",
  "country",
  "postal_code"
];

function fillInAddress(autocomplete) {
  var place = autocomplete.getPlace();
  var components = place.address_components;
  var component_array_length = component_array.length;
  var component_length = components.length;
  var marshalled = Googleplaces$Googleplacesautocomplete.marshall(components, component_length);
  for(var idx = 0 ,idx_finish = component_array_length - 1 | 0; idx <= idx_finish; ++idx){
    var el = document.getElementById(Caml_array.caml_array_get(component_array, idx));
    if (!(el == null)) {
      el.setAttribute("value", "");
      el.setAttribute("disabled", "false");
    }
    
  }
  for(var idx$1 = 0 ,idx_finish$1 = component_array_length - 1 | 0; idx$1 <= idx_finish$1; ++idx$1){
    var el$1 = document.getElementById(Caml_array.caml_array_get(component_array, idx$1));
    if (!(el$1 == null)) {
      var match = Caml_array.caml_array_get(component_array, idx$1);
      switch (match) {
        case "administrative_area_level_1" : 
            el$1.setAttribute("value", marshalled.administrative_area_level_1);
            break;
        case "country" : 
            el$1.setAttribute("value", marshalled.country);
            break;
        case "locality" : 
            el$1.setAttribute("value", marshalled.locality);
            break;
        case "postal_code" : 
            el$1.setAttribute("value", marshalled.postal_code);
            break;
        case "route" : 
            el$1.setAttribute("value", marshalled.route);
            break;
        case "street_number" : 
            el$1.setAttribute("value", marshalled.street_number);
            break;
        default:
          
      }
    }
    
  }
  return /* () */0;
}

function geolocate() {
  window.navigator;
  return /* () */0;
}

function reducer(_, _$1) {
  window.navigator;
  return /* Update */Block.__(0, [/* LOADED */1]);
}

function initAutocomplete(id) {
  var el = new google.maps.places.Autocomplete(Js_primitive.nullable_to_opt(document.getElementById(id)), Googleplaces$Googleplacesautocomplete.types);
  el.addListener("place_changed", (function () {
          return fillInAddress(el);
        }));
  return /* () */0;
}

var component = ReasonReact.reducerComponent("Input");

function make(placeholder, id, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function () {
              return initAutocomplete(id);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          id: "input"
                        }, React.createElement("input", {
                              id: id,
                              placeholder: placeholder,
                              type: "text",
                              onFocus: (function () {
                                  return Curry._1(self[/* send */3], /* GEOLOCATE */0);
                                })
                            }));
            }),
          /* initialState */(function () {
              return /* INIT */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.componentForm = componentForm;
exports.component_array = component_array;
exports.fillInAddress = fillInAddress;
exports.geolocate = geolocate;
exports.reducer = reducer;
exports.initAutocomplete = initAutocomplete;
exports.component = component;
exports.make = make;
/* component Not a pure module */
